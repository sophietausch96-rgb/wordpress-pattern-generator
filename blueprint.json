// /blueprint.json
{
  "preferredVersions": { "php": "8.2", "wp": "latest" },
  "features": { "networking": true },
  "steps": [
    { "step": "login", "username": "admin", "password": "password" },
    {
      "step": "writeFile",
      "path": "/wp-content/plugins/ai-patterns/ai-patterns.php",
      "data": "<?php\n/**\n * Plugin Name: AI Patterns\n * Description: Registriert Gutenberg Block Patterns aus AI-HTML (per REST) + Bridge f\u00fcr Parent postMessage\n * Version: 0.5.0\n */\nif (!defined('ABSPATH')) { exit; }\n\n// Admin-Seite (optional) – manuelles Einf\u00fcgen\nadd_action('admin_menu', function(){\n  add_menu_page('AI Pattern Maker','AI Pattern Maker','manage_options','ai-patterns','ai_patterns_admin_page','dashicons-art',58);\n});\n\nfunction ai_patterns_admin_page(){\n  $nonce = wp_create_nonce('wp_rest');\n  $rest  = esc_url_raw( rest_url('ai-patterns/v1/create') );\n  echo '<div class=\"wrap\"><h1>AI Pattern Maker</h1>';\n  echo '<p>Gib Gutenberg-Block-HTML ein (<!-- wp:... -->). Nach Speichern erscheint es im Inserter unter <b>AI Patterns</b>.</p>';\n  echo '<textarea id=\"ai_html\" rows=\"12\" style=\"width:100%\" placeholder=\"<!-- wp:group --><!-- /wp:group -->\"></textarea><br><br>';\n  echo '<button id=\"ai_save\" class=\"button button-primary\">Als Pattern registrieren</button> ';\n  echo '<span id=\"ai_status\" style=\"margin-left:10px\"></span>';\n  echo '<script>window.AI_PATTERNS={nonce:\"'. $nonce .'\", endpoint:\"'. $rest .'\"};</script>';\n  echo '</div>';\n}\n\n// Admin inline JS – nur f\u00fcr die Admin-Seite\nadd_action('admin_enqueue_scripts', function($hook){\n  if($hook === 'toplevel_page_ai-patterns'){\n    wp_enqueue_script('wp-api-fetch'); // stellt Handle sicher\n    wp_add_inline_script('wp-api-fetch', \"(function(){var b=document.getElementById('ai_save');var t=document.getElementById('ai_html');var s=document.getElementById('ai_status');function n(m){s.textContent=m;} b&&b.addEventListener('click', async function(){var html=(t.value||'').trim(); if(!html||html.indexOf('<!-- wp:')===-1){ alert('Bitte g\u00fcltiges Gutenberg-Block-HTML einf\u00fcgen.'); return; } n('Speichere\u2026'); try { var res = await fetch(window.AI_PATTERNS.endpoint,{method:'POST',headers:{'Content-Type':'application/json','X-WP-Nonce':window.AI_PATTERNS.nonce},body:JSON.stringify({title:'AI Pattern \u2013 Entwurf', content:html})}); if(!res.ok){ throw new Error('Fehler: '+res.status); } n('Gespeichert! \u00d6ffne im Editor den Block-Inserter \u2192 AI Patterns.'); } catch(err){ console.error(err); n('Fehler: '+err.message); } });})();\");\n  }\n});\n\n// BRIDGE: auf allen Admin-Seiten – empf\u00e4ngt postMessage vom Parent und ruft REST\nadd_action('admin_enqueue_scripts', function(){\n  wp_enqueue_script('wp-api-fetch');\n  $nonce = wp_create_nonce('wp_rest');\n  $rest  = esc_url_raw( rest_url('ai-patterns/v1/create') );\n  $js = \"(function(){\\n  var endpoint='\" . $rest . \"';\\n  var nonce='\" . $nonce . \"';\\n  window.addEventListener('message', async function(ev){\\n    var d = ev && ev.data;\\n    if(!d || d.type !== 'AI_PATTERNS_CREATE') return;\\n    try {\\n      var body = JSON.stringify({ title: (d.payload && d.payload.title) || 'AI Pattern', content: (d.payload && d.payload.content) || '' });\\n      var res = await fetch(endpoint,{ method:'POST', headers:{ 'Content-Type':'application/json', 'X-WP-Nonce': nonce }, body: body });\\n      // UI-Feedback zeigt der Parent\\n    } catch(e){ console.error('Bridge error', e); }\\n  });\\n})();\";\n  wp_add_inline_script('wp-api-fetch', $js);\n});\n\n// REST-Endpoint: /wp-json/ai-patterns/v1/create\nadd_action('rest_api_init', function(){\n  register_rest_route('ai-patterns/v1','/create',[\n    'methods'  => 'POST',\n    'permission_callback' => function(){ return current_user_can('edit_posts'); },\n    'args' => [ 'title'=>['required'=>true,'type'=>'string'], 'content'=>['required'=>true,'type'=>'string'] ],\n    'callback' => function( WP_REST_Request $req ){\n      $title   = sanitize_text_field($req->get_param('title'));\n      $content = $req->get_param('content');\n      if (strpos($content, '<!-- wp:') === false) {\n        return new WP_REST_Response(['ok'=>false,'error'=>'no_gutenberg_html'], 400);\n      }\n      if (!function_exists('register_block_pattern_category')) { return new WP_REST_Response(['ok'=>false,'error'=>'no_patterns'], 400); }\n      register_block_pattern_category('ai-patterns', ['label' => 'AI Patterns']);\n      $slug = 'ai-pattern-' . wp_generate_password(8,false,false);\n      register_block_pattern($slug, [ 'title'=>$title, 'content'=>$content, 'categories'=>['ai-patterns'] ]);\n      return new WP_REST_Response(['ok'=>true,'slug'=>$slug], 200);\n    }\n  ]);\n});\n"
    },
    { "step": "activatePlugin", "plugin": "ai-patterns/ai-patterns.php" },
    { "step": "installTheme", "themeZipFile": "https://downloads.wordpress.org/theme/twentytwentyfour.latest-stable.zip" },
    { "step": "activateTheme", "theme": "twentytwentyfour" },
    { "step": "navigate", "url": "/wp-admin/post-new.php?post_type=page" }
  ]
}
